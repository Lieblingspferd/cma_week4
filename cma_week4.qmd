---
title: "Computational Movement Analysis - Week 4"
author: "Annika Hirsch"
format: 
  html:
    toc: true
    toc-title: Contents
execute: 
  warning: false
  message: false
lang: en
editor: visual
---

# Demo

```{r}
library("readr")
library("dplyr")
library("sf")
library("ggplot2")
```

```{r}
wildschwein <- read_delim("wildschwein_BE_2056.csv", ",")

# Careful! What Timezone is assumed?
sabi <- wildschwein |>
    st_as_sf(coords = c("E", "N"), crs = 2056, remove = FALSE) |>
    filter(TierName == "Sabi", DatetimeUTC >= "2015-07-01", DatetimeUTC < "2015-07-03")
```

## Task a

I am choosing a temporal window, as suggested, of one hour.

## Task b

```{r}
distance_by_element <- function(later, now) {
  as.numeric(
    st_distance(later, now, by_element = TRUE)
  )
}

sabi <- sabi |>
    mutate(
        nMinus2 = distance_by_element(lag(geometry, 2), geometry),  # distance to pos -30 minutes
        nMinus1 = distance_by_element(lag(geometry, 1), geometry),  # distance to pos -15 minutes
        nPlus1  = distance_by_element(geometry, lead(geometry, 1)), # distance to pos +15 mintues
        nPlus2  = distance_by_element(geometry, lead(geometry, 2))  # distance to pos +30 minutes
    )
```

```{r}
sabi <- sabi |>
    rowwise() |>
    mutate(
        stepMean = mean(c(nMinus2, nMinus1, nPlus1, nPlus2))
    ) |>
    ungroup()

sabi
```

## Task c

```{r}
sabi <- sabi |>
    mutate(static = stepMean < mean(stepMean, na.rm = TRUE))

sabi_filter <- sabi |>
    filter(!static)

sabi_filter |>
    ggplot(aes(E, N)) +
    geom_path() +
    geom_point() +
    coord_fixed() +
    theme(legend.position = "bottom")
```

# Project data

## Preparation

```{r}
library("FITfileR")

activity <- readFitFile("kurz_auf_den_harder.fit")

activity

activity_records <- records(activity)
activity_records

# Transform into sf
activity_sf <- st_as_sf(activity_records[["record_1"]],
                        coords = c("position_long", "position_lat"),
                        crs = 4326
)

# Change crs
activity_sf <- st_transform(activity_sf, crs = 2056)

coords <- st_coordinates(activity_sf)

activity_sf <- cbind(activity_sf, coords)


library("tmap")

# Visualisation
tmap_mode("view")

# Create a line
activity_line <- activity_sf %>%
  summarise(do_union = FALSE) %>% 
  st_cast("LINESTRING")

# Change basemap
tmap_options(basemaps = "OpenStreetMap")

# Plot map
tm_shape(activity_line) +
  tm_lines() 
```

The data that I imported already is only from one day (more like less than 2 hours), so I am not going to shorten it even more (though it would be interesting to just look at the downhill parts).

But I am going to delete the points where the GPS accuracy is higher than 30, because these point are at the beginning and the end of the activity and it seems, as if I was inside for these points.

```{r}
activity_sf <- subset(activity_sf, activity_sf$gps_accuracy<= 30)
```

## Task 1: Segmentation

Implementation of steps a, b and c of the demo data.

The temporal sampling rate seems to be around 1 second. So as my window I am going to choose 10 seconds:

pos\[n-5\] to pos\[n\]

...

pos\[n-1\] to pos\[n\]

pos\[n\] to pos\[n+1\]

...

pos\[n\] to pos\[n+5\]

```{r}
distance_by_element <- function(later, now) {
  as.numeric(
    st_distance(later, now, by_element = TRUE)
  )
}

activity_sf <- activity_sf |>
    mutate(
        nMinus5 = distance_by_element(lag(geometry, 5), geometry), 
        nMinus4 = distance_by_element(lag(geometry, 4), geometry),  
        nMinus3 = distance_by_element(lag(geometry, 3), geometry),  
        nMinus2 = distance_by_element(lag(geometry, 2), geometry),  
        nMinus1 = distance_by_element(lag(geometry, 1), geometry),  
        nPlus1  = distance_by_element(geometry, lead(geometry, 1)), 
        nPlus2  = distance_by_element(geometry, lead(geometry, 2)),
        nPlus3  = distance_by_element(geometry, lead(geometry, 3)),
        nPlus4  = distance_by_element(geometry, lead(geometry, 4)),
        nPlus5  = distance_by_element(geometry, lead(geometry, 5)),
    )

activity_sf <- activity_sf |>
    rowwise() |>
    mutate(
        stepMean = mean(c(nMinus5, nMinus4, nMinus3, nMinus2, nMinus1, nPlus1, nPlus2, nPlus3, nPlus4, nPlus5))
    ) |>
    ungroup()

activity_sf
```

## Task 2: Specify and apply threshold d

Considering, that this was a mountainbiking activity, there should not be many static points, since this was a route that I already knew. The only static points should be breaks or waiting for hikers to pass. I do not think that using the mean value as threshold is going to work.

I am checking the distribution of speed.

```{r}
hist(activity_sf$stepMean)
```

Judging from this, I am going to test with a threshold value of 1.

```{r}
activity_sf <- activity_sf |>
    mutate(static = stepMean < 1)

activity_filter <- activity_sf |>
    filter(!static)

activity_filter |>
    ggplot(aes(X, Y)) +
    geom_path() +
    geom_point() +
    coord_fixed() +
    theme(legend.position = "bottom")
```

```{r}
hist(activity_filter$stepMean)
```

Seems to be a good threshold.

## Task 3: Visualize segmented trajectories

```{r}
activity_sf |>
    ggplot(aes(X, Y, color = static)) +
    geom_path() +
    geom_point() +
    coord_equal() +
    theme(legend.position = "bottom")
```

## Task 4: Segment-based analysis

```{r}
rle_id <- function(vec) {
    x <- rle(vec)$lengths
    as.factor(rep(seq_along(x), times = x))
}
```

```{r}
activity_sf <- activity_sf |>
    mutate(segment_id = rle_id(static))

activity_sf |>
    ggplot(aes(X, Y, color = segment_id)) +
    geom_path() +
    geom_point() +
    coord_equal() #+ # this type of legend makes the plot illegible
    #theme(legend.position = "bottom")
```

I am now supposed to remove short segments. In the task description they are classified as shorter than 5 min, but knowing the characteristics of my activity, that does not make sense here. So I am going to look at the data to determine short segments:

```{r}
plot(table(activity_sf$segment_id))
```

```{r}
# Deleting the segments which have less than 10 points
segment_filter <- activity_sf[activity_sf$segment_id %in% names(which(table(activity_sf$segment_id) > 10)), ]

# Checkin the lengths:
plot(table(segment_filter$segment_id))

# Now plotting this:
segment_filter |>
    ggplot(aes(X, Y, color = segment_id)) +
    geom_path() +
    geom_point() +
    coord_equal()
```

## Task 5: Similarity measures

```{r}
pedestrian <- read_delim("pedestrian.csv", ",")

nos <- unique(pedestrian$TrajID)
library(RColorBrewer)
pal <- brewer.pal(6, "Set1")

p <- pedestrian |>
    ggplot(aes(E, N, color = as.factor(TrajID))) +
    geom_path() +
    geom_point() +
    coord_fixed() +
    labs(x="", y="") +
    theme_minimal()
    #theme(axis.text.x=element_blank(), 
    #      axis.ticks.x=element_blank(), 
    #      axis.text.y=element_blank(),  
    #      axis.ticks.y=element_blank() 
    #      )

p + facet_wrap(~TrajID) + ggtitle("Visual comparison of the 6 Trajectories") 

```

I've tried to get my plot as close to the picture in the instructions, but if I continue further I will just waste my time, to get the settings as close as possible. So this has to be enough.

## Task 6: Calculate similarity

```{r}
#install.packages("SimilarityMeasures")
library(SimilarityMeasures)

help(package = "SimilarityMeasures")
```

```{r}
# Creating the matrices for the trajectories
# m rows (number of points)
# n cols (dimension of the points)

# Creating the subsets of the individual trajectories
Traj1 <- pedestrian |>
  subset(TrajID == 1) |>
  select(E, N)

Traj2 <- pedestrian |>
  subset(TrajID == 2) |>
  select(E, N)

Traj3 <- pedestrian |>
  subset(TrajID == 3) |>
  select(E, N)

Traj4 <- pedestrian |>
  subset(TrajID == 4) |>
  select(E, N)

Traj5 <- pedestrian |>
  subset(TrajID == 5) |>
  select(E, N)

Traj6 <- pedestrian |> 
  subset(TrajID == 6) |>
  select(E, N)

# Transforming them into matrices
Traj1 <- data.matrix(Traj1)

Traj2 <- data.matrix(Traj2)

Traj3 <- data.matrix(Traj3)

Traj4 <- data.matrix(Traj4)

Traj5 <- data.matrix(Traj5)

Traj6 <- data.matrix(Traj6)
```

```{r}
# Performing the similarity measures
# Edit distance
traj <- c("Traj1", "Traj2", "Traj3", "Traj4", "Traj5", "Traj6")

# just a loop for comparing all trajectories. 
# Reading through the task description again, I just need to compare to trajectory 1...
# But I already have this loop now... In case I need it for something else, I am going to keep it.
for (i in traj){ 
  traj_index <- which(traj == i)
  if (traj_index < length(traj)){
    traj2 <- traj[(traj_index + 1): length(traj)] 
  }
  for (j in traj2){
    if (i != j){
      temp_i <- get(i)
      temp_j <- get(j)
      temp <- EditDist(temp_i, temp_j)
      print(paste0("The Edit distance of ", i, " to ", j, " is: ", temp))
    }
  }
}
```

```{r}
# Initializing another vector to loop through the trajectories
traj <- c("Traj2", "Traj3", "Traj4", "Traj5", "Traj6")

# DTW
dtw_values <- c()
for (i in traj){
  temp <- get(i)
  dtw_values[which(traj == i)] <- DTW(Traj1, temp)
}

# Frechet Distance
frechet_values <- c()
for (i in traj){
  temp <- get(i)
  frechet_values[which(traj == i)] <- Frechet(Traj1, temp)
}

# Edit Distance
edit_values <- c()
for (i in traj){
  temp <- get(i)
  edit_values[which(traj == i)] <- EditDist(Traj1, temp)
}

# LCSS
lcss_values <- c()
for (i in traj){
  temp <- get(i)
  lcss_values[which(traj == i)] <- LCSS(Traj1, temp, errorMarg = 20)
}
```

```{r}
# plotting the similarity measures

# DTW
dtw_data <- data.frame(trajectory = traj, values = dtw_values)
dtw <- ggplot(data = dtw_data, aes(x= trajectory, y = values,  fill = trajectory)) + 
  geom_bar(stat = "identity") +
  xlab("Trajectory") +
  ylab("Value") 

# Frechet 
frechet_data <- data.frame(trajectory = traj, values = frechet_values)
frechet <- ggplot(data = frechet_data, aes(x = trajectory, y = values, fill = trajectory)) + 
  geom_bar(stat = "identity") +
  xlab("Trajectory") + 
  ylab("Value")

# Edit
edit_data <- data.frame(trajectory = traj, values = edit_values)
edit <- ggplot(data = edit_data, aes(x = trajectory, y = values, fill = trajectory)) + 
  geom_bar(stat = "identity") +
  xlab("Trajectory") + 
  ylab("Value")

# LCSS
lcss_data <- data.frame(trajectory = traj, values = lcss_values)
lcss <- ggplot(data = lcss_data, aes(x = trajectory, y = values, fill = trajectory)) + 
  geom_bar(stat = "identity") +
  xlab("Trajectory") + 
  ylab("Value")

library(gridExtra)
grid.arrange(dtw, frechet, edit, lcss, nrow = 2)
```

Works, but somehow the values are really off, compared to the values in the example plot...

And I want the plot itself to be closer to the example... So I'm going to do it a different way.

```{r}
# I've got to store everything in one dataframe (in order to get the plot to look like I want it to)

# And since the values were kind of off, I am going to recompute them since I don't trust them to be correct

# Initializing the first values and a datframe
similarity <- data.frame(measure = c(0), trajectory = c(0), value = c(0))

# Similarity Measures:
sim_meas <- c("DTW", "Edit Distance", "Fréchet Distance", "LCSS")
for (i in sim_meas){
  for (j in traj){
    temp <- get(j)
    if (i == "DTW"){
      value <- DTW(Traj1, temp)
    }
    if (i == "Edit Distance"){
      value <- EditDist(Traj1, temp)
    }
    if (i == "Fréchet Distance"){
      value <- Frechet(Traj1, temp)
    }
    if (i == "LCSS"){
      value <- LCSS(Traj1, temp, errorMarg = 20)
    }
    similarity[nrow(similarity) + 1, ] <- list(i, j, value)
  }
}


# Don't forget to remove the first row in the end:
similarity <- subset(similarity, measure != 0)

# Then plotting it:
s <- similarity |>
    ggplot(aes(trajectory, value, fill = trajectory)) +
    geom_bar(stat = "identity") +
    labs(x="", y="")

s + facet_wrap(~measure, scales = "free") + ggtitle("Computed similarities using different measures \nbetween trajectory 1 to all other trajectories") 
```

Still different results than the example in the exercise (considering I did compute them the same way, as I did before, it's not really surprising).
